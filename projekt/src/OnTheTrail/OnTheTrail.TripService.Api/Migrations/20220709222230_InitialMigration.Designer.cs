// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnTheTrail.TripService.Api.Database;

#nullable disable

namespace OnTheTrail.TripService.Api.Migrations
{
    [DbContext(typeof(TripDbContext))]
    [Migration("20220709222230_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.Search", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TrailDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("TripTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.Trip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("QueryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TripScore")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.TripNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("NextTrailColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextTrailDifficulty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NextTrailTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int");

                    b.Property<long?>("TripId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("TripNodes");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.Search", b =>
                {
                    b.HasOne("OnTheTrail.TripService.Api.Database.Entities.User", "User")
                        .WithMany("Searches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.Trip", b =>
                {
                    b.HasOne("OnTheTrail.TripService.Api.Database.Entities.Search", "Query")
                        .WithMany("Results")
                        .HasForeignKey("QueryId");

                    b.HasOne("OnTheTrail.TripService.Api.Database.Entities.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId");

                    b.Navigation("Query");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.TripNode", b =>
                {
                    b.HasOne("OnTheTrail.TripService.Api.Database.Entities.Trip", null)
                        .WithMany("Path")
                        .HasForeignKey("TripId");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.Search", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.Trip", b =>
                {
                    b.Navigation("Path");
                });

            modelBuilder.Entity("OnTheTrail.TripService.Api.Database.Entities.User", b =>
                {
                    b.Navigation("Searches");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
